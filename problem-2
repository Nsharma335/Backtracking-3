
//Time  : mn*mn = O(m^2n^2)
//space : O(1) and in recursive stack its O(mn)

class Solution {
     int[][] dirs={{0,1},{-1,0},{1,0},{0,-1}};
    public boolean exist(char[][] board, String word) {
        //directions variable
        //traverse grid
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(backtrack(board,word, i,j, 0))
                    return true;
            }
        }
        return false;
    }
    
    
   private boolean backtrack(char[][] board, String word, int i, int j, int cursor)
   {
       //condition meets and ends successfully when cursors traverse to end of the word length
       if(cursor==word.length())
           return true;
       
       //remember the grid elemnt because we gonna chnage it to something else to mark it visited
     
       //if a match occurs at particulr index on board then only check the neighbors from dirs array
        if(i>=0 && i<board.length && j>=0 && j<board[0].length && board[i][j]==word.charAt(cursor))
         {
            //remmeber the state of board and save it to variable
               char remember=board[i][j];
            //change it to something else so hat we wont go to infite loop of cehcking the same state
               board[i][j]='#';

        for(int[] dir:dirs){
            int r=dir[0]+i;
            int c=dir[1]+j;
            //go dfs and come to last char and 1st condition gives true so if this is true means this functions shud returns true
           if(backtrack(board, word,r, c, cursor+1))
               return true;

         }
            //restore the state
              board[i][j]=remember;

       }
       return false;
   }
}
